<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prathamesh Nevagi (pratz)</title>
    <description>Site powered by Jekyll and Centrarium theme.
</description>
    <link>http://pratz.github.io/</link>
    <atom:link href="http://pratz.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Jun 2017 18:07:01 +0000</pubDate>
    <lastBuildDate>Mon, 26 Jun 2017 18:07:01 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Raspberry pi setup NFS and SMB server</title>
        <description>&lt;h4 id=&quot;nfs-server&quot;&gt;NFS server&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install server&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt install nfs-common nfs-server
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create directory you wanna share&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mkdir /media/storage
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/exports&lt;/code&gt; with below content&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /media/storage 192.168.1.0/24(rw,all_squash,insecure,no_subtree_check)
  # &amp;lt;directory&amp;gt; &amp;lt;who_can_access&amp;gt; &amp;lt;options&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart services&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo service nfs restart
  /etc/init.d/nfs-kernel-server restart
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connecting from client (MacOS)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mkdir /Users/username/nfs_shared
  sudo mount -v -o &quot;resvport&quot; 192.168.1.9:/media/storage /Users/username/nfs_shared
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;samba-server&quot;&gt;Samba server&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install server&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt-get install samba samba-common-bin
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create samba password for system user&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo smbpasswd -a pi
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create directory you wanna share&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mkdir /media/storage
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/samba/smb.conf&lt;/code&gt; with below content&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [PI]
  comment = Pi workspace
  path = /media/storage
  create mask = 0775
  directory mask = 0775
  read only = no
  browseable = yes
  public = no
  force user = pi
  only guest = no
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart service&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo service samba restart
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connecting from client (MacOS)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mkdir /Users/username/smb_shared
  mount -t smbfs //pi@192.168.1.9/pi /Users/username/smb_shared
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/raspi-nfs-smb</link>
        <guid isPermaLink="true">http://pratz.github.io/raspi-nfs-smb</guid>
        
        <category>raspberry-pi</category>
        
        <category>nfs</category>
        
        <category>samba</category>
        
        
        <category>electronics</category>
        
      </item>
    
      <item>
        <title>NVim auto complete</title>
        <description>&lt;h4 id=&quot;intro&quot;&gt;Intro:&lt;/h4&gt;
&lt;p&gt;Initially I used &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;YouCompleteMe&lt;/a&gt; and &lt;a href=&quot;https://github.com/Shougo/neocomplete.vim&quot;&gt;Neocomplete&lt;/a&gt; for auto-completion with Vim. But then I made a move from &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; to &lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt;. While browsing I stumbled upon &lt;a href=&quot;https://github.com/Shougo/deoplete.nvim&quot;&gt;Deoplete&lt;/a&gt;, an auto-complete for Neovim and boy!! I was surprised by its performance. Actually, Neocomplete and Deoplete are created by the same author, first for Vim and later for Neovim. I must say, Deoplete leverages Neovimâ€™s async feature very well to provide an excellent performance.&lt;/p&gt;

&lt;p&gt;Deoplete is a general asynchronous auto-completion framework, however, it provides language specific auto-completion through different sources. Two of which, for &lt;a href=&quot;https://github.com/zchee/deoplete-jedi&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://github.com/zchee/deoplete-go&quot;&gt;Go&lt;/a&gt;, are shown below, as those are the once which I use.&lt;/p&gt;

&lt;h4 id=&quot;deoplete-in-action&quot;&gt;Deoplete in action:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./assets/posts/nvim_as_ide/deoplete.gif&quot; alt=&quot;Deoplete&quot; title=&quot;Deoplete&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deoplete-python-source&quot;&gt;Deoplete &lt;a href=&quot;https://github.com/zchee/deoplete-jedi&quot;&gt;python source&lt;/a&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./assets/posts/nvim_as_ide/deoplete_python.gif&quot; alt=&quot;Deoplete python&quot; title=&quot;Deoplete python&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deoplete-go-source&quot;&gt;Deoplete &lt;a href=&quot;https://github.com/zchee/deoplete-go&quot;&gt;go source&lt;/a&gt;:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./assets/posts/nvim_as_ide/deoplete_go.gif&quot; alt=&quot;Deoplete go&quot; title=&quot;Deoplete go&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deoplete-settings&quot;&gt;Deoplete settings:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Below are few Deoplete settings that I use&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_ignore_case = 1
  let g:deoplete#sources#go = 'vim-go'
  let g:deoplete#sources#python = 'jedi-vim'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/nvim-auto-complete</link>
        <guid isPermaLink="true">http://pratz.github.io/nvim-auto-complete</guid>
        
        <category>nvim</category>
        
        <category>deoplete</category>
        
        
        <category>neovim-as-ide</category>
        
      </item>
    
      <item>
        <title>Runnel - Stream cli output over http</title>
        <description>&lt;h4 id=&quot;runnel&quot;&gt;Runnel&lt;/h4&gt;
&lt;p&gt;A program to streams any command line output over http.
This is useful when we want to display command output on client side.
One such use case can be, displaying live logs in browser which are running inside a container on server side.&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Using docker (recommended)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git clone https://github.com/VeritasOS/runnel.git
  cd runnel

  # build docker image
  docker build -t runnel:latest .

  # start runnel server
  docker run --name runnel -d -p 127.0.0.1:9090:9090 runnel:latest
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using binary (not recommended, because system dependencies are taken care in docker file on behalf of you)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git clone https://github.com/VeritasOS/runnel.git
  cd runnel

  ./bin/linux_64/runnel_server -p localhost:9090
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Trigger below commands to get live stream&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Fire command with curl
  curl -X POST -H 'Content-Type: application/json' -d '{&quot;cmd&quot;:&quot;ping -c 3 google.com&quot;}' http://localhost:9090/command

  # Get live output stream
  # replace uuid with one which you get from above command
  while true; do curl -sS -H 'Content-Type: application/json' 'http://localhost:9090/stream/fd4b1a38-94f4-4eba-80e7-50578ac4baae' | jq '.response'; done
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;library&quot;&gt;Library:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We can use the api directly in golang code&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install redis server&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Get lib
  go get github.com/veritasos/runnel/runnel

  # Fire command
  client := runnel.NewClient()
  key, err := client.RunCommand(&quot;ping&quot;, &quot;-c 2 google.com&quot;)

  # Get output stream
  client := runnel.NewClient()
  output, err := client.Stream(key, 10)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;detailed-documentation&quot;&gt;Detailed documentation:&lt;/h4&gt;
&lt;p&gt;A much more detailed documentation is provided here &lt;a href=&quot;https://github.com/VeritasOS/runnel&quot;&gt;&lt;strong&gt;runnel&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/VeritasOS/runnel&quot;&gt;&lt;strong&gt;Feel free to Contribute back&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/runnel</link>
        <guid isPermaLink="true">http://pratz.github.io/runnel</guid>
        
        <category>golang</category>
        
        <category>http</category>
        
        <category>cli</category>
        
        
        <category>api-client</category>
        
      </item>
    
      <item>
        <title>Artifactory python client</title>
        <description>&lt;h4 id=&quot;py-artifactory&quot;&gt;Py-Artifactory&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jfrog.com/artifactory&quot;&gt;&lt;strong&gt;Artifactory&lt;/strong&gt;&lt;/a&gt; is a artifact repository manager which supports software packages created by different technologies.
It can also be integrated with major CI/CD and DevOps tools.
This article shows how we can communicate with artifactory using a python api client.&lt;/p&gt;

&lt;h4 id=&quot;pre-requisites&quot;&gt;Pre-requisites:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Python 2.7 or higher&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;libxml2/libxslt (will be deprecated in future releases)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Debian based
  sudo apt-get install libxml2-dev libxslt1-dev

  # RedHat based
  sudo yum install libxml2-devel libxslt-devel
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fire-up below command in terminal, &lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt; specifies a version number.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pip install git+https://github.com/veritasos/py-artifactory.git@&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create client instance&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  from artifactory import Artifactory
  artifactory = Artifactory(
          url=&quot;http://127.0.0.1:8081&quot;,
          username=&quot;username&quot;,
          password=&quot;password&quot;,
          )
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List users&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  user_list = artifactory.security.users.list()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get user&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  user = artifactory.security.users.fetch(&quot;user.name&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create user&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  user = artifactory.security.users.new()
  user.name = &quot;first.last&quot;
  user.password = &quot;test&quot;
  user.email = &quot;first.last@testartifactory.com&quot;
  user.groups = [&quot;readers&quot;]
  response = user.create()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And much more â€¦â€¦&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Artifactory Users
  Artifactory Groups
  Artifactory Permissions
  Artifactory Repositories
  Artifactory Repository Replication
  Artifactory LDAP
  Artifactory User Api Keys
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;detailed-documentation&quot;&gt;Detailed documentation:&lt;/h4&gt;
&lt;p&gt;A much more detailed documentation is provided here &lt;a href=&quot;https://github.com/VeritasOS/py-artifactory&quot;&gt;&lt;strong&gt;py-artifactory&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pratz/py-openemm&quot;&gt;&lt;strong&gt;Feel free to Contribute back&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/artifactory-python-client</link>
        <guid isPermaLink="true">http://pratz.github.io/artifactory-python-client</guid>
        
        <category>python</category>
        
        <category>artifactory</category>
        
        <category>api</category>
        
        
        <category>api-client</category>
        
      </item>
    
      <item>
        <title>LXC port forwarding</title>
        <description>&lt;h4 id=&quot;port-forwarding-for-lxc-containers&quot;&gt;Port forwarding for lxc containers&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Allow internet access and ipv4 forwarding:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  iptables -t nat -A POSTROUTING -s 10.0.3.0/24 -o br0 -j MASQUERADE
  echo 1 LEFT ARROW /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Persistent ipv4 forwarding&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  vi /etc/sysctl.conf
  net.ipv4.ip_forward = 1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check forwarding:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cat /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List iptables&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo iptables -t nat -L -n -v
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forwarding web server (apache2)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  iptables -t nat -A PREROUTING -p tcp -i eth1 -d 192.168.99.103 --dport 9000 -j DNAT --to 10.0.3.76:80
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forwarding SSH&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  iptables -t nat -A PREROUTING -p tcp -i eth1 -d 192.168.99.103 --dport 9001 -j DNAT --to 10.0.3.76:22
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/lxc-port-forwarding</link>
        <guid isPermaLink="true">http://pratz.github.io/lxc-port-forwarding</guid>
        
        <category>lxc</category>
        
        <category>port-forwarding</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>On-prem ansible galaxy</title>
        <description>&lt;h4 id=&quot;on-prem-ansible-galaxy&quot;&gt;On-prem ansible galaxy&lt;/h4&gt;
&lt;p&gt;Generic ansible roles can be shared through &lt;a href=&quot;https://galaxy.ansible.com&quot;&gt;ansible galaxy&lt;/a&gt; though in many cases we can not use ansible galaxy as its hosted publicly. Solution is to host something similar to ansible galaxy on-prem.&lt;/p&gt;

&lt;h5 id=&quot;on-prem-galaxy-repository&quot;&gt;On-prem galaxy repository&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;For this blog I am considering stash (https://stash.company.com) but gitlab, gogs or similar should work as well&lt;/li&gt;
  &lt;li&gt;Create a new project on stash &lt;code class=&quot;highlighter-rouge&quot;&gt;Ansible Galaxy&lt;/code&gt; with key &lt;code class=&quot;highlighter-rouge&quot;&gt;AG&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create repo for each generic ansbile role.&lt;/li&gt;
  &lt;li&gt;We can browse through all the generic ansbile roles at https://stash.company.com/projects/AG&lt;/li&gt;
  &lt;li&gt;Now these roles can be used with multiple ansible playbooks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;usage&quot;&gt;Usage&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.yml&lt;/code&gt; alongside ansible &lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For this blog purposes I am considering &lt;code class=&quot;highlighter-rouge&quot;&gt;awscli&lt;/code&gt; as an generic ansible role with its own repo, which resides in our newly created stash project &lt;code class=&quot;highlighter-rouge&quot;&gt;Ansible Galaxy (AG)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy/paste below content to &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.yml&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  name: awscli
  src: git+https://stash.company.com/scm/ag/awscli
  version: master
  path: ~/.ansible/roles

  # name - name of role
  # src - location of role
  # version - which branch the role should be installed from
  # path - where we want to install roles
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.yml&lt;/code&gt; files acts as a role dependency list for our &lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;installation&quot;&gt;Installation&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Once we define our ansible playbook dependencies, its time to install them.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo ansible-galaxy install -r requirements.yml

  # NOTE: no need to install ansible-galaxy seperately, it ships with default ansible installation
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Done! all the roles are now installed and ready to be used by our &lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/on-prem-ansible-galaxy</link>
        <guid isPermaLink="true">http://pratz.github.io/on-prem-ansible-galaxy</guid>
        
        <category>ansible</category>
        
        <category>ansible-galaxy</category>
        
        
        <category>infrastructure-management</category>
        
      </item>
    
      <item>
        <title>Custom ansible module</title>
        <description>&lt;h3 id=&quot;how-to-write-ansible-custom-modules&quot;&gt;How to write ansible custom modules&lt;/h3&gt;
&lt;p&gt;Ansible modules are easy way to interact between an existing application and ansible playbook. This blog covers how to write your own ansible module.&lt;/p&gt;

&lt;h4 id=&quot;module&quot;&gt;Module&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a python file called &lt;code class=&quot;highlighter-rouge&quot;&gt;greet.py&lt;/code&gt; with following content&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def main():

      module = AnsibleModule(
          argument_spec = dict(
              message = dict(required=True, type=&quot;str&quot;),
          ),
          supports_check_mode=True
      )

      # get module params
      message = module.params.get(&quot;message&quot;)

      try:
          module.exit_json(changed=True, msg=message)
      except:
          module.fail_json(msg=&quot;It's bad not to greet someone&quot;)

  from ansible.module_utils.basic import AnsibleModule
  if __name__ == &quot;__main__&quot;:
      main()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;File name &lt;code class=&quot;highlighter-rouge&quot;&gt;greet.py&lt;/code&gt; is considered as ansible module.&lt;/li&gt;
  &lt;li&gt;Arguments defined in ansible playbooks will be parsed by &lt;code class=&quot;highlighter-rouge&quot;&gt;AnsibleModule&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ansible module always returns json, for convenience ansible provides two methods, one for success and other for failure&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          # For success
          module.exit_json(changed=True, msg=message)

          # For failure
          module.fail_json(msg=&quot;It's bad not to greet someone&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create an ansible playbook called &lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  touch playbook.yml
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create directory &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt; alongside &lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt; and copy &lt;code class=&quot;highlighter-rouge&quot;&gt;greet.py&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mkdir library
  cp greet.py library
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now our directory structure should look like&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  library
      |- greet.py
  playbook.yml
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can now use &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; module with our &lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  - hosts: localhost
    tasks:
    - name: Lets start greeting
      greet:
          message: &quot;Good morning&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Done !!&lt;/strong&gt; as simple as that ;)&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/custom-ansible-module</link>
        <guid isPermaLink="true">http://pratz.github.io/custom-ansible-module</guid>
        
        <category>ansible</category>
        
        
        <category>infrastructure-management</category>
        
      </item>
    
      <item>
        <title>Custom git credential helper in python</title>
        <description>&lt;h4 id=&quot;git-credential-helper&quot;&gt;Git credential helper:&lt;/h4&gt;
&lt;p&gt;Git credential helper is used to save user credentials, so that user does not require to enter credentials on each git operation.
Git provides few default git credential helpers, &lt;a href=&quot;https://git-scm.com/docs/gitcredentials&quot;&gt;see how to use them&lt;/a&gt;.
This blog will demonstrate on how to build custom git credential helper.&lt;/p&gt;

&lt;h4 id=&quot;simple-python-cli&quot;&gt;Simple python cli:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Letâ€™s write a python cli called &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_helper.py&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# logic to get username/password from auth file&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# logic to store username/password to auth file&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# its better to encrypt password if its in plain text&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# logic to delete auth file&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'operation'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Git action to be performed (get|store|erase)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# parser all arguments&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# get credentials&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username={0}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password={0}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;store&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# if credentials are already stored do not store again&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;erase&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid git operation&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This cli takes three git operations as cli arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;erase&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;These arguments are not coincident, they are used by git. Letâ€™s know more about them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;git-credentials-store&quot;&gt;Git credentials store:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Git credentials store looks for three arguments
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;: called when triggered git pull, git fetch, git push etc.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt;: called when triggered git pull, git fetch, git push etc.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;erase&lt;/code&gt;: if our provided credentials fail, git will fallback to its own credentials prompt, if this fails as well &lt;code class=&quot;highlighter-rouge&quot;&gt;erase&lt;/code&gt; is called.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;git-helper-configuration&quot;&gt;Git helper configuration:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To configure our cli as git helper, trigger the below command&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git config --global credential.https://git.company.com.helper &quot;./path/to/cli/auth_helper.py&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This will define &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_helper.py&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;credential&lt;/code&gt; section of &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; file (userâ€™s home directory).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://git.company.com&lt;/code&gt; is the domain where git is hosted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Done!!&lt;/strong&gt; Next time we use git, our &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_helper.py&lt;/code&gt; should provide credentials for git authorization.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/custom-git-credential-helper</link>
        <guid isPermaLink="true">http://pratz.github.io/custom-git-credential-helper</guid>
        
        <category>git</category>
        
        <category>python</category>
        
        
        <category>version-control-system</category>
        
      </item>
    
      <item>
        <title>Git login with Netrc</title>
        <description>&lt;h4 id=&quot;what-is-netrc-file-&quot;&gt;What is Netrc file ?&lt;/h4&gt;
&lt;p&gt;Netrc file contains user credentials and is used to auto-login. It is usually located in users home directory &lt;code class=&quot;highlighter-rouge&quot;&gt;.netrc&lt;/code&gt; but location can be overridden with &lt;code class=&quot;highlighter-rouge&quot;&gt;NETRC&lt;/code&gt; environment variable. Netrc also supports macros &lt;code class=&quot;highlighter-rouge&quot;&gt;macdef&lt;/code&gt; to automate tasks. Netrc can be used with ftp, curl, git etc.&lt;/p&gt;

&lt;h4 id=&quot;netrc-file&quot;&gt;Netrc file:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Create file named &lt;code class=&quot;highlighter-rouge&quot;&gt;.netrc&lt;/code&gt; in home directory.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lets consider your git server is hosted on domain &lt;code class=&quot;highlighter-rouge&quot;&gt;git.company.com&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ~ $ cat .netrc
  machine git.company.com
  login first.last
  password secret-password
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;secure-netrc-file&quot;&gt;Secure netrc file:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;.netrc&lt;/code&gt; is used to store credentials, lets secure the file.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ~ $ chmod 0600 ~/.netrc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thatâ€™s it, next time when you use git for domain &lt;code class=&quot;highlighter-rouge&quot;&gt;git.company.com&lt;/code&gt;, git should pick up the credentials on behalf of you ;)&lt;/p&gt;

&lt;h4 id=&quot;warning&quot;&gt;Warning:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Netrc stores credentials in plan text. This is how netrc is meant to be ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;use-case&quot;&gt;Use case:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Its a good idea to use netrc when you have token based authentication.&lt;/li&gt;
  &lt;li&gt;Automation for service accounts with token based authentication.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 09:43:59 +0000</pubDate>
        <link>http://pratz.github.io/git-auto-login-with-netrc</link>
        <guid isPermaLink="true">http://pratz.github.io/git-auto-login-with-netrc</guid>
        
        <category>git</category>
        
        <category>netrc</category>
        
        
        <category>version-control-system</category>
        
      </item>
    
      <item>
        <title>Netrc python client</title>
        <description>&lt;h4 id=&quot;what-is-netrc-file-&quot;&gt;What is Netrc file ?&lt;/h4&gt;
&lt;p&gt;Netrc file contains user credentials and is used to auto-login. It is usually located in users home directory &lt;code class=&quot;highlighter-rouge&quot;&gt;.netrc&lt;/code&gt; but location can be overridden with &lt;code class=&quot;highlighter-rouge&quot;&gt;NETRC&lt;/code&gt; environment variable. Netrc also supports macros &lt;code class=&quot;highlighter-rouge&quot;&gt;macdef&lt;/code&gt; to automate tasks. Netrc can be used with ftp, curl, git etc.&lt;/p&gt;

&lt;h4 id=&quot;netrc-file-sample&quot;&gt;Netrc file sample:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ cat .netrc
machine product.company.com
login first.last
password secret-password

macdef macro-name1
command1
command2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;get-client&quot;&gt;Get client:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -o netrc_client.py  &quot;https://gist.githubusercontent.com/pratz/789dc165c6d9f79be86608547b128c69/raw/41fb7796f6b6d0a09ac5ddeaf8c79de30a2387ed/NetRc%2520-%2520read,%2520write,%2520update&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;client-compatibility&quot;&gt;Client compatibility:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Linux/Mac
- Python 2.7.x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# create client
netrc_instance = NetRc(
        &quot;product.company.com&quot;,
        login=&quot;first.last&quot;,
        password=&quot;secret-password&quot;,
        account=&quot;&quot;, # account is optional
        )

# create or update file content
netrc_instance.create_or_update()

# Custom file path (not recommended, as other programs might look for .netrc in users home directory)
NETRC_FILE_PATH = /custom/file/path
netrc_instance.create_or_update(path=NETRC_FILE_PATH)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;warning&quot;&gt;Warning:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Netrc stores credentials in plan text. This is how netrc is meant to be ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;use-case&quot;&gt;Use case:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Its a good idea to use netrc when you have token based authentication.&lt;/li&gt;
  &lt;li&gt;Automation for service accounts with token based authentication.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://pratz.github.io/netrc-python-client</link>
        <guid isPermaLink="true">http://pratz.github.io/netrc-python-client</guid>
        
        <category>python</category>
        
        <category>netrc</category>
        
        <category>api</category>
        
        
        <category>api-client</category>
        
      </item>
    
  </channel>
</rss>
